Генераторы:
	Генераторами называются компоненты инструмента CMake, отвечающие за создание проектов для конечных систем построения.
	Для каждой поддерживаемой системы (make, Microsoft Visual Studio определенной версии и т.д.) существует свой генератор.

	Выбор конкретного генератора задаётся в командной строке CMake при помощи ключа "-G".

	
	$ cmake -G "Visual Studio 14 2015" ..\project_src

	
	Полный список имён поддерживаемых генератором для данной версии можно узнать при помощи команды:

	
	$ cmake --help


	Ключ "-A" позволяет указать целевую платформу (ARM, x64, и т.д.)


Входные файлы:
	Входными файлами для программы CMake являются файлы CMakeLists.txt, лежащие в корне каталога проекта (с файлами исходных кодов).
	Путь к каталогу проекта предаётся инструменту CMake в качестве последнего аргумента командной строки.
	Крупные проекты могут также содержать подкаталоги с проектами нижнего уровня, каждый из которых будет иметь в корне свой файл CMakeLists.txt
	Кроме файлов CMakeLists.txt также могут использоваться файлы с расширением ".cmake". Эти файлы могут подключаться из программы на языке CMake
	при помощи директивы include(), вызываться при исполнении команды find_package() (модули поиска или конфигурационные файлы) или передаваться
	инструменту CMake для исполнения при помощи ключа "-P"


Комментарии:
	# - Однострочный комментарий.
	#[[ ]] - Блочный комментарий.


Команды общего назначения:
	# cmake_minimum_required(VERSION {версия} [FATAL_ERROR])
	
	Команда определяет минимальную версию инструмента CMake, при помощи которого можно обрабатывать текущий входной файл проекта.
	Аргумент {версия} может содержать до 4 чисел, разделенных точками.
	Команду cmake_minimum_required() рекомендуется указывать самой первой в файле CMakeLists.txt верхнего уровня. Если команда
	ещё не исполнялась CMake требуется выполнить действие, зависящие от политики совместимости, он выведет предупреждение.


	# project({имя_проекта} [VERSION {версия}] [LANGUAGES {язык1} ... {языкN}]

	Команда устанавливает имя для иерархии проектов. Например, для генераторов Microsoft Visual Studio это имя определяет 
	имя создаваемого решения.
		- После аргумента VERSION можно указать версию проекта - строку, содержащую до 4 чисел, разделенных точками.
		  установка версии проекта доступна в CMake начиная с версии 3.0.
		
		- После необязательного аргумента LANGUAGES указываются языки программирования, для которых обеспечивается поддержка в проекте.


	# include({файл} | {модуль} [OPTIONAL] [RESULT_VARIABLE {имя_переменной}])

	Загружает из внешнего файла и исполняет заданный модуль CMake. Модуль может задаваться при помощи пути к файлу, либо
	только именем модуля (без пути и расширения). В последнем случае файл с именем {модуль}.cmake ищется в каталогах, список
	которых задан переменной CMAKE_MODULE_PATH (по умолчанию пустая), и затем в каталоге стандартных модулей, поставляемых вместе
	с CMake.
	
	
	# message([{режим}] {строка1} ... {строка2})
	
	# {режим} = STATUS | WARNING | AUTHOR_WARNING | SEND_ERROR | FATAL_ERROR | DEPRECATION

	Команда предназначена для вывода сообщения различными утилитами, интерпретирующими входной файл.

Команды генерации целей:
	# add_executable({логическое_имя_цели} [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] {исходный_модуль1} ... {исходный_модульN})

	Команда добавляет к проекту цель с заданным логическим именем, построение которой из указанных исходных модулей 
	должно привести к созданию исполняемого файла.

	Изменить имя можно при помощи установки свойства OUTPUT_NAME цели.
	
	# set_property(TARGET {имя_цели} PROPERTY OUTPUT_NAME {имя_выходного_файла})

	CMAKE_RUNTIME_OUTPUT_DIRECTORY содержит имя подкатолога построения.

	Использование аргумента WIN32 приведёт к отключению консоли при построении на платформе Windows.
	Для остальных платформ этот аргумент игнорируется.

	Передача аргумента EXCLUDE_FROM_ALL приведет к тому, что генерируемая цель будет исключена
	из цели "all".

	
	# add_library({логическое_имя_цели} [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] {исходный_модуль1} ... {исходный_модульN})
	
	Первая форма команды add_library() аналогична команде add_executable(), но создаёт цель для построения библиотеки.

	# add_library({логическое_имя_цели} {тип_библиотеки = SHARED | STATIC | MODULE | UNKNOWN} IMPORTED)
	
	Тип библиотеки можно задать при помощи необязательного аргумента:
		- STATIC: статическая;
		- SHARED: динамическая (разделяемая);
		- MODULE: разделяемая, предназначенная исключительно для загрузки при помощи функций API (POSIX dlopen() и т.п.).
			  такой тип библиотеки используется для реализации загружаемых модулей (plugins).

	Изменить расположение библиотеки можно при помощи соответствующих свойств цели, которые инициализируются значениями специальных
	переменных:
		CMAKE_ARCHIVE_OUTPUT_DIRECTORY | статические(+импорта)
		CMAKE_RUNTIME_OUTPUT_DIRECTORY | DLL
		CMAKE_LIBRARY_OUTPUT_DIRECTORY | модули, разделяемые
	
	Размещение библиотек в разных ОС стр. 85

	Вторая форма команды add_library() предназначена для добавления к проекту внешней заранее собранной библиотеки (как правило, сторонней).
	Как и для предыдущей формы команды, создаётся цель с заданным логическим именем, которая по умолчанию имеет область видимости текущего каталога
	построения и ниже и которую можно использовать, как и остальные цели библиотек, для связывания с другими целями проекта при помощи команды
	target_link_libraries(). Однако в этом случае не создаётся никаких правил построения библиотеки.
	
	Чтобы указать местоположение файла библиотеки для создаваемой цели, необходимо записать его в свойство цели IMPORTED_LOCATION, а также
	в свойства IMPORTED_LOCATION_DEBUG и т.д. для каждой используемой конфигурации. Для получения пути к исполняемому файлу библиотеки можно
	использовать команду find_library().


	# add_subdirectory({подкаталог_проекта} [{подкаталог_построения}] [EXCLUDE_FROM_ALL])
	
	Команда добавляет к построению подпроект, расположенный заданном подкаталоге. В нём должен находиться файл CMakeLists.txt с описанием подпроекта.
	Имеет смысл указывать относительный путь к каталогу.
		- При помощи необязательного аргумента {подкаталог_построения} можно указать подкаталог для выходных и промежуточных файлов проекта.
